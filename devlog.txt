6/17 -  - COMMIT - (first git commit) updated chat routes and models, updated the frontend, added url context

6/18 -  beginning of this devlog 
        yesterday I implemented first drafts of planned chat routes and endpoints, reworked a lot of the frontend, added URL context, 
        and afterwards found out that URLs are generally stored in environmental variables. Oops! would be an easy fix if it becomes important.

        today I plan on finishing up the chats routes, setting up the db calls for messages to display in chats, and tuning the frontend to display them correctly

        down the line- refactor context and hooks into two separate directories, import context into hooks.

        today I finished chat routes, set up db calls for messages to display in chats, tuned frontend. 
       
        - COMMIT - finished chat routes

        Next up: tune message routes and frontend, think about what's next after that! So many things...
        could do content types, avatars, adding friends, a million other things!

6/20 -  - COMMIT - commit for travel, minor changes

6/24 -  I did a few things while out of town, but nothing major.

        Today I worked on the frontend (boo!). I added a modal form to come up when adding a new chat. Then, I started bugfixing everything that was going wrong
        since the last time I ran the whole thing together. I fixed some things, which brought me back to several issues which I also fixed. 
        - Fixed URL context provider, had some typos in imports from previous attempts in some files here and there. Also, authprovider uses urlcontext provider
                but was being rendered outside of the urlprovider component. oops!
        - Removed the body from the chatroomGet api call, as it is a get request. oops!
        - Found a bug with the way the chatroom map was being rendered in the left navbar component, didn't fix yet as I found the unauthorized errors more pressing:
        - Added ability for jwt to be decoded and user state set from the payload

        - COMMIT - see above

        Next up: Authorization headers! Everything is there, just need to set it correctly. Then, logic for adding chatrooms (pretty sure this is already handled on
                the backend, so should be relatively plug and play) 

6/25 -  early morning reading- Axios and Fetch() for handling api calls. Something to consider while I fix up the api calls today to have auth headers.

        fixed auth header, but led me to working on the backend (hooray) when the db call grabbing the user through a junction table failed, tuned models and added a
        user_chat model explicitly instead of it just being instantiated through associations. 
        
        Next I need to look up how Sequelize queries from a junction table with a model in the most efficient way, instead of making multiple db calls. 
        It would be a simple join query in sql, so I'm sure it's easily doable, just need to search the sequelize documentation.

6/26 -  spent all day trying to get the dang sequelize query to work through the junction table. It didn't. Keeps throwing TypeError, cannot read properties of undefined
        for Sequelize's getTableName() method. I poked around in the sequelize code and I guess it is somehow not recognizing the junction table model as a model, although 
        I queried the model to check and it works. I also tried passing in the specific model as the through attribute, also didn't work. If this keeps up, I may just do 
        a raw sql query for now and see if I can't come back to this. Pretty disappointed in the sequelize documentation- this is pretty basic stuff, querying through a
        junction table.

6/30 -  Wrote up a StackOverflow question about the sequelize query issues. Going with a raw sql query in the meantime.

7/1 -   StackOverflow didn't get any bites, but using a double one-many relationship from users and chats to users_chats instead of the many-many with users_chats as the 
        junction model has allowed me to skirt that weird sq error! I'm so pleased. Now it's frontend time.

7/2 -   - Tuned chat routes to put exactly what the frontend needs in response
        - Switched sync to no longer force, the db is not being changed so much that it needs to be recreated every time anymore
        - Added double one-many relationship associations between User_Chat model and the Chat and User models
        - Tracked down an issue where some functions were running multiple times, put one inside a useEffect() and the others were actually because of React.StrictMode
        - Finished the ChatFormModal's form, but have not finished submission logic
        - Correctly formatted components to display info from backend
        - Set up scrolldown for new messages
        Next up!
        - Websockets to have true real-time chats :D

7/5 -   - Fixed an issue where users were not logged out with an expired JWT
        - tuned chat post logic on backend
        - added delete operation to chat api
        - added delete chat functionality to frontend UI
        - cleaned up chat creation modal css in frontend
        - cleaned up mainbody css in frontend, added css for delete button

7/8 -   Reading up on and working on implementing Socket.io websockets

7/9 -   Set up some elementary websockets, current issues: active chat doesn't switch on clicking on a new chat,
        any msg sent sends 5 times.

7/10 -  Websockets are implemented! :D 
        - COMMIT & MERGE - websocket implementation

7/15 -  Starting work on a settings page made me want to modularize the current MainBody, LeftNavbar, and TopNavbar components, so I worked on that for most of today.
        I got it working on the chatroom side of things, but didn't quite get around to implementing settings. My idea is to make the components take a json and
        display info from it, just like with chatrooms. I need to really think about whether that's effective design, though, or if I'm just trying to fit a square
        peg in a circle-shaped hole before I commit this. 

7/16 -  Frontend: set up settings page, tied to backend; not finished with modularization refactor. 
        Backend: wrote delete account, change display name endpoints in user router (added name column to user table)
        todo -  render display name
                figure out this whole array of components passed as props idea to fully modularize the navbar
                look into merging settingspage and homepage
                take a second look at websockets for channels

7/17 -  Rendered display name, atm requires user to relogin so token changes for display name to reflect.
        - COMMIT - 
                - Edited gitignore
                Backend:
                - delete account, change display name endpoints
                - name column added to users table
                - some light error handling in auth middleware
                Front:
                - added settings page, using same components as homepage
                - modularized components for use in multiple scenarios (unfinished)
                - added a top navbar component

7/18 -  Worked towards modularization of components

7/22 -  Added brief setup instructions in readme, made a sliding panel component to show members in chats
        Committed the readme changes

7/23 -  Changed max msg length to 1250 characters, added error handling so user is informed when this
        constraint is broken
        Tuned sliding member panel to stay inside its container
        Added a back button to navigate to the previous page user was on
        Fixed a small bug in the new profile settings component

7/24 -  Switched from using context to give components the address of the app and backend to using .env 
        Reworked sockets to initialize in the App.jsx file (front) so all components can make use of sockets
        